# vim: filetype=sh
#
# Remove entry from known_hosts
kh() {
    if [ -z "$1" ]; then
        echo "Please provide line number to remove"
    else
        gsed -i "$1d" $HOME/.ssh/known_hosts
    fi
}


# Tunnell remote port to local
tunnel() {
    ssh -L $2:localhost:$2 $1 -N
}


pyclean() {
    find . -type f -name "*.py[co]" -delete
    find . -path "*/__pycache__/*" -delete
    find . -type d -name "__pycache__" -empty -delete
    find . -path "*/*.egg-info/*" -delete
    find . -type d -name "*.egg-info" -empty -delete
}


ansclean() {
    find . -type f -name "*.retry" -delete
}


venv_ps1() {
    if [ -n "$VIRTUAL_ENV" ]; then
        # TODO: Figure out how to make echo interpret \[ and \]
        #echo -en "\[\e[33m\][$(basename $VIRTUAL_ENV)]\[\e[0m\]"
        echo "[$(basename $VIRTUAL_ENV)]"
    fi
}

forward_service_port() {
    env=$1
    service=$2
    local_port=${3:-9007}
    remote_port=${4:-8000}

    kctx $env
    pod=$(kubectl get --no-headers=true pods -l app=$service -o custom-columns=:metadata.name | head -1)
    kubectl port-forward $pod $local_port:$remote_port
}

get_service_psql_url() {
    env=$1
    service=$2

    kctx $env >/dev/null 2>&1
    pod=$(kubectl get --no-headers=true pods -l app=$service -o custom-columns=:metadata.name | head -1)
    kubectl exec $pod env 2>/dev/null | grep DATABASE_URI | awk -F'=' '{print $2}' | sed s/5432/2345/
}

get_service_logs() {
    env=$1
    service=$2

    kctx $env >/dev/null 2>&1
    pod=$(kubectl get --no-headers=true pods -l app=$service -o custom-columns=:metadata.name | head -1)
    kubectl logs -f $pod $service
}

update_commit_msg_hook() {
    projects_dir="$HOME/projects"
    commit_msg_hook="$HOME/.git_templates/hooks/prepare-commit-msg"
    for p in $(ls -d -1 $projects_dir/**); do
        hooks_dir="$p/.git/hooks"
        [[ -d $hooks_dir ]] && cp $commit_msg_hook $hooks_dir
    done
}
