# vim: filetype=sh
#
# Remove entry from known_hosts
kh() {
    if [ -z "$1" ]; then
        echo "Please provide line number to remove"
    else
        sed -i "$1d" $HOME/.ssh/known_hosts
    fi
}


# Tunnell remote port to local
tunnel() {
    ssh -L $2:localhost:$2 $1 -N
}


pyclean() {
    find . -type f -name "*.py[co]" -delete

    find . -path "*/__pycache__/*" -delete
    find . -path "*/*.egg-info/*" -delete
    find . -path "*/.pytest_cache/*" -delete
    find . -path "*/.mypy_cache/*" -delete
    find . -path "*/pip-wheel-metadata/*" -delete

    find . -type d -name "__pycache__" -empty -delete
    find . -type d -name "*.egg-info" -empty -delete
    find . -type d -name ".pytest_cache" -empty -delete
    find . -type d -name ".mypy_cache" -empty -delete
    find . -type d -name "pip-wheel-metadata" -empty -delete
}


ansclean() {
    find . -type f -name "*.retry" -delete
}


venv_ps1() {
    if [ -n "$VIRTUAL_ENV" ]; then
        # TODO: Figure out how to make echo interpret \[ and \]
        #echo -en "\[\e[33m\][$(basename $VIRTUAL_ENV)]\[\e[0m\]"
        echo "[$(basename $VIRTUAL_ENV)]"
    fi
}

forward_service_port() {
    env=$1
    service=$2
    local_port=${3:-9007}
    remote_port=${4:-8000}

    kctx $env
    pod=$(kubectl get --no-headers=true pods -l app=$service -o custom-columns=:metadata.name | head -1)
    kubectl port-forward $pod $local_port:$remote_port
}

get_service_psql_url() {
    env=$1
    service=$2

    kctx $env >/dev/null 2>&1
    pod=$(kubectl get --no-headers=true pods -l app=$service -o custom-columns=:metadata.name | head -1)
    kubectl exec $pod env 2>/dev/null | grep DATABASE_URI | awk -F'=' '{print $2}' | sed s/5432/2345/
}

get_service_logs() {
    env=$1
    service=$2

    kctx $env >/dev/null 2>&1
    pod=$(kubectl get --no-headers=true pods -l app=$service -o custom-columns=:metadata.name | head -1)
    kubectl logs -f $pod $service
}

update_commit_msg_hook() {
    projects_dir="$HOME/projects"
    commit_msg_hook="$HOME/.git_templates/hooks/prepare-commit-msg"
    for p in $(ls -d -1 $projects_dir/**); do
        hooks_dir="$p/.git/hooks"
        [[ -d $hooks_dir ]] && cp $commit_msg_hook $hooks_dir
    done
}

transfer(){
    if [ $# -eq 0 ]; then
        echo "Usage: transfer <file>">&2
        return 1
    fi

    file="$1"
    file_name=$(basename "$file")

    if [ ! -e "$file" ]; then
        echo "$file: No such file or directory">&2
        return 1
    fi
    if [ -d "$file" ]; then
        echo "$file is a directory">&2
        return 1
    else
        # \ to avoid using the alias
        \cat "$file" | curl --upload-file "-" "https://transfer.sh/$file_name" | tee /dev/null
    fi
    echo
}

gta() {
    git tag -a $1 -m $1 && gps origin $1
}

pass() {
    unset GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL
    $HOMEBREW_PREFIX/bin/pass $@
}

otp() {
    unset GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL
    PASSWORD_STORE_DIR=$OTP_STORE_DIR_PATH $HOMEBREW_PREFIX/bin/pass $@
}

provision_otp() {
    if ! ykman info; then
        return
    fi

    accounts=$(ykman oath accounts list)

    for path in $(find $OTP_STORE_DIR_PATH -name *.gpg); do
        otp_path=${path#$OTP_STORE_DIR_PATH/}  # remove prefix
        otp_path=${otp_path%.gpg}  # remove suffix

        site=$(basename $otp_path)

        arr=( $(otp show $otp_path 2>/dev/null) )
        secret="${arr[0]}"
        account_name="${arr[1]}"

        echo "Provisioning $site:$account_name"

        if ! echo "$accounts" | grep $site:$account_name; then
            ykman oath accounts add $site:$account_name $secret
        else
            echo "$site:$account_name already exists"
        fi
    done
}

find_processes() {
    for p in $(pgrep $1); do
        echo -e "$p\t $(ps -o command= $p)\t \e[33m$(pwdx $p | awk -F': ' '{print $2}')\e[0m"
    done
}

wp() {
    if [ $# -eq 0 ]; then
        watch "kubectl get po"
    else
        watch "kubectl get po | grep $1"
    fi

}

git_oldest() {
    # the `grep` call is to only match non-binary files
    find . -type f -not -path './node_modules/*' -not -path './.git/*' -not -path './.direnv/*' -not -path './*cache/*' -exec grep -I -q . {} \; -print0 |
        while IFS= read -r -d '' file; do
            # only do a blame on files that are tracked
            if git ls-files --error-unmatch "$file" &>/dev/null; then
                git blame --date=format:%Y%m%d -f "$file"
            fi

        # I made the `match` call only search for years that start with `20`, so needs modification if commits precede 2000
        done | awk $'{ match($0, /20[0-2][0-9]{5}/); print substr($0, RSTART, RLENGTH) "\t" $0 }' | sort -r | tail
}
