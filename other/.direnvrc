# vim: set ft=bash:

realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

layout_python() {
  local old_env
  local python=${1:-python}
  [[ $# -gt 0 ]] && shift
  old_env=$(direnv_layout_dir)/virtualenv
  unset PYTHONHOME
  if [[ -d $old_env && $python == python ]]; then
    VIRTUAL_ENV=$old_env
  else
    local python_version ve
    # shellcheck disable=SC2046
    read -r python_version ve <<<$($python -c "import pkgutil as u, platform as p;ve='venv' if u.find_loader('venv') else ('virtualenv' if u.find_loader('virtualenv') else '');print(p.python_version()+' '+ve)")
    if [[ -z $python_version ]]; then
      log_error "Could not find python's version"
      return 1
    fi

    VIRTUAL_ENV=$(direnv_layout_dir)/$python_version
    case $ve in
      "venv")
        if [[ ! -d $VIRTUAL_ENV ]]; then
          $python -m venv "$@" "$VIRTUAL_ENV"
        fi
        ;;
      "virtualenv")
        if [[ ! -d $VIRTUAL_ENV ]]; then
          $python -m virtualenv "$@" "$VIRTUAL_ENV"
        fi
        ;;
      *)
        log_error "Error: neither venv nor virtualenv are available."
        return 1
        ;;
    esac
  fi
  export VIRTUAL_ENV
  PATH_add "$VIRTUAL_ENV/bin"
}

layout_pyenv() {
  local python_version=$1
  local python_root=$(pyenv root)/versions/$python_version
  load_prefix "$python_root"
  local python="$python_root/bin/python"
  if [[ ! -x "$python" ]]; then
    log_error "Error: $python can't be executed."
    return 1
  fi
  [[ $# -gt 0 ]] && shift
  unset PYTHONHOME
  if [[ -n $VIRTUAL_ENV ]]; then
    VIRTUAL_ENV=$(realpath "${VIRTUAL_ENV}")
  else
    VIRTUAL_ENV=$(direnv_layout_dir)/$python_version
  fi
  export VIRTUAL_ENV
  if [[ ! -d $VIRTUAL_ENV ]]; then
    log_status "No virtual environment found. Creating $VIRTUAL_ENV"
    "$python" -m venv "$VIRTUAL_ENV"
  fi
  PATH_add "$VIRTUAL_ENV/bin"
}

export_alias() {
  local name=$1
  shift
  local alias_dir=$(direnv_layout_dir)/aliases
  local target="$alias_dir/$name"
  mkdir -p "$alias_dir"
  PATH_add "$alias_dir"
  echo "#!/usr/bin/env -S bash -e" > "$target"
  echo "$@" >> "$target"
  chmod +x "$target"
}


export_function() {
  local name=$1
  local alias_dir=$(direnv_layout_dir)/aliases
  mkdir -p "$alias_dir"
  PATH_add "$alias_dir"
  local target="$alias_dir/$name"
  if declare -f "$name" >/dev/null; then
    echo "#!/usr/bin/env bash" > "$target"
    declare -f "$name" >> "$target" 2>/dev/null
    # Notice that we add shell variables to the function trigger.
    echo "$name \$*" >> "$target"
    chmod +x "$target"
  fi
}

use_node() {
  layout node

  local node_version=$1

  if [ "$node_version" == "package.json" ]; then
    # Requires jq: `brew install jq`
    node_version=`jq --raw-output .engines.node package.json | tr -d "<=> "`
  fi

  local node_path=${NVM_DIR}/versions/node

  if [ -x "$node_path/$node_version/bin/node" ]; then
    PATH_add $node_path/$node_version/bin
  elif [ -x "$node_path/v$node_version/bin/node" ]; then
    # Support nvm users (nvm prefixes versions with 'v')
    PATH_add $node_path/v$node_version/bin
  else
    echo "!!! Node.js version $node_version is not installed"
  fi

  export NODE_PATH=./node_modules
}

source_up
